apiVersion: v1
kind: Namespace
metadata:
  name: ${VSCODE_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
---
apiVersion: v1
kind: Service
metadata:
  name: vscode-server
  namespace: ${VSCODE_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
spec:
  type: ClusterIP
  ports:
    - appProtocol: http
      name: http
      port: ${VSCODE_SERVER_PORT}
      targetPort: http
  selector:
    app.kubernetes.io/name: vscode-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vscode-server
  namespace: ${VSCODE_NAMESPACE}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: vscode-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vscode-server
    spec:
      serviceAccountName: vscode-server
      containers:
        - name: dind-daemon
          image: docker:dind
          imagePullPolicy: Always
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: ${DIND_CPU_MAX}
              memory: ${DIND_MEM_MAX}
            requests:
              cpu: ${DIND_CPU_REQUEST}
              memory: ${DIND_MEM_REQUEST}
          volumeMounts:
            - name: vscode-server-volume
              mountPath: /var/lib/docker
              subPath: vscode-server-docker
            - name: docker-graph-run
              mountPath: /var/run
            - name: vscode-server-volume
              mountPath: /certs
              subPath: vscode-server-cert
        - name: vscode-server
          image: ${VSCODE_SERVER_IMAGE}
          imagePullPolicy: Always
          ports:
            - containerPort: ${VSCODE_SERVER_PORT}
              name: http
          volumeMounts:
            - mountPath: /home/vscode
              name: vscode-server-volume
              subPath: vscode-server-home
            - mountPath: /certs
              name: vscode-server-volume
              subPath: vscode-server-cert
            - mountPath: /var/run
              name: docker-graph-run
          env:
            - name: VSCODE_KEYRING_PASS
              value: ${VSCODE_KEYRING_PASS}
            - name: VSCODE_RUNNING_USER
              value: vscode
          resources:
            limits:
              cpu: ${VSCODE_CPU_MAX}
              memory: ${VSCODE_MEM_MAX}
            requests:
              cpu: ${VSCODE_CPU_REQUEST}
              memory: ${VSCODE_MEM_REQUEST}
      volumes:
        - name: docker-graph-run
          emptyDir: {}
        - name: vscode-server-volume
          persistentVolumeClaim:
            claimName: pvc-vscode-server
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: ${VSCODE_NAMESPACE}
  name: pvc-vscode-server
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: ${STORAGE_CLASS}
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ${VSCODE_NAMESPACE}
  name: vscode-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vscode-server-ingress
  namespace: ${VSCODE_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/auth-url: "${VSCODE_INGRESS_AUTH_URL}"
    nginx.ingress.kubernetes.io/auth-signin: "${VSCODE_INGRESS_AUTH_SIGNIN}"
    external-dns.alpha.kubernetes.io/hostname: ${ACCOUNT_HOSTNAME}
    external-dns.alpha.kubernetes.io/target: ${VSCODE_HOSTNAME}
    external-dns.alpha.kubernetes.io/ttl: '600'
    cert-manager.io/cluster-issuer: ${VSCODE_CERT_CLUSTER_ISSUER}
spec:
  ingressClassName: ${NGINX_INGRESS_CLASS}
  tls:
    - hosts:
        - ${VSCODE_HOSTNAME}
      secretName: vscode-server-ingress-tls
  rules:
    - host: ${VSCODE_HOSTNAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: vscode-server
                port:
                  number: ${VSCODE_SERVER_PORT}
