apiVersion: v1
kind: Namespace
metadata:
  name: ${ACCOUNT_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ${ACCOUNT_NAMESPACE}
  name: vscode-server
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
---
apiVersion: v1
kind: Service
metadata:
  name: vscode-server
  namespace: ${ACCOUNT_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
spec:
  type: ClusterIP
  ports:
    - appProtocol: http
      name: http
      port: ${VSCODE_SERVER_PORT}
      targetPort: http
  selector:
    app.kubernetes.io/name: vscode-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vscode-server
  namespace: ${ACCOUNT_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: vscode-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vscode-server
        vscode-server/owner: ${ACCOUNT_NAMESPACE}
    spec:
      serviceAccountName: vscode-server
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
      containers:
        - name: dind-daemon
          image: docker:dind
          imagePullPolicy: Always
          securityContext:
            privileged: true
          env:
            - name: DOCKER_HOST
              value: unix:///var/run/docker-host.sock
          resources:
            limits:
              cpu: ${DIND_CPU_MAX}
              memory: ${DIND_MEM_MAX}
            requests:
              cpu: ${DIND_CPU_REQUEST}
              memory: ${DIND_MEM_REQUEST}
          volumeMounts:
            - name: vscode-server-volume
              mountPath: /var/lib/docker
              subPath: vscode-server-docker
            - name: docker-graph-run
              mountPath: /var/run
            - name: vscode-server-volume
              mountPath: /certs
              subPath: vscode-server-cert
        - name: vscode-server
          image: ${VSCODE_SERVER_IMAGE}
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              add:
                - IPC_LOCK
          ports:
            - containerPort: ${VSCODE_SERVER_PORT}
              name: http
          livenessProbe:
            tcpSocket:
              port: ${VSCODE_SERVER_PORT}
            initialDelaySeconds: 60
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: ${VSCODE_SERVER_PORT}
            initialDelaySeconds: 5
            failureThreshold: 5
            periodSeconds: 10
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /home/codespace/.ssh
              name: vscode-server-ssh
              readOnly: true
            - mountPath: /home/codespace/.vscode-remote
              name: vscode-server-volume
              subPath: vscode-server-remote
            - mountPath: /workspaces
              name: vscode-server-volume
              subPath: vscode-server-home
            - mountPath: /certs
              name: vscode-server-volume
              subPath: vscode-server-cert
            - name: docker-graph-run
              mountPath: /var/run
          env:
            - name: VSCODE_KEYRING_PASS
              value: "${VSCODE_KEYRING_PASS}"
            - name: VSCODE_RUNNING_USER
              value: "${VSCODE_RUNNING_USER}"
          envFrom:
            - configMapRef:
                name: ${ACCOUNT_NAMESPACE}
          resources:
            limits:
              cpu: "${VSCODE_CPU_MAX}"
              memory: "${VSCODE_MEM_MAX}"
            requests:
              cpu: "${VSCODE_CPU_REQUEST}"
              memory: "${VSCODE_MEM_REQUEST}"
      volumes:
        - name: docker-graph-run
          emptyDir: {}
        - name: vscode-server-ssh
          secret:
            secretName: vscode-server-ssh
            optional: true
        - name: vscode-server-volume
          persistentVolumeClaim:
            claimName: pvc-vscode-server-${ACCOUNT_NAMESPACE}
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: ${ACCOUNT_NAMESPACE}
  name: pvc-vscode-server-${ACCOUNT_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  storageClassName: ${STORAGE_CLASS}
  resources:
    requests:
      storage: ${VSCODE_PVC_SIZE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
  name: vscode-server
  namespace: ${ACCOUNT_NAMESPACE}
rules:
  - apiGroups:
      - ""
    resourceNames:
      - ${ACCOUNT_NAMESPACE}
    resources:
      - secrets
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
  name: vscode-server
  namespace: ${ACCOUNT_NAMESPACE}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vscode-server
subjects:
  - kind: ServiceAccount
    name: vscode-server
    namespace: ${ACCOUNT_NAMESPACE}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vscode-server
  namespace: ${ACCOUNT_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
    vscode-server/owner: ${ACCOUNT_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/use-regex: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/configuration-snippet: |
      sub_filter_types text/html text/html;
      sub_filter_once off;
      sub_filter 'href="/' 'href="/${ACCOUNT_NAMESPACE}/';
      sub_filter 'src="/' 'src="/${ACCOUNT_NAMESPACE}/';
      sub_filter 'href=\'/' 'href=\'/${ACCOUNT_NAMESPACE}/';
      sub_filter 'src=\'/' 'src=\'/${ACCOUNT_NAMESPACE}/';
    nginx.ingress.kubernetes.io/auth-url: "${VSCODE_INGRESS_AUTH_URL}"
    nginx.ingress.kubernetes.io/auth-signin: "${VSCODE_INGRESS_AUTH_SIGNIN}"
    nginx.ingress.kubernetes.io/auth-response-headers: "X-Auth-Request-User, X-Auth-Request-Email, X-Auth-Request-Access-Token"
#    external-dns.alpha.kubernetes.io/hostname: ${ACCOUNT_HOSTNAME}
#    external-dns.alpha.kubernetes.io/target: ${VSCODE_HOSTNAME}
#    external-dns.alpha.kubernetes.io/ttl: '600'
#    cert-manager.io/cluster-issuer: "${VSCODE_CERT_CLUSTER_ISSUER}"
spec:
  ingressClassName: ${NGINX_INGRESS_CLASS}
  tls:
    - hosts:
        - ${VSCODE_HOSTNAME}
      secretName: vscode-server-ingress-tls
  rules:
    - host: ${VSCODE_HOSTNAME}
      http:
        paths:
          - path: /${ACCOUNT_NAMESPACE}/(.*)
            pathType: Prefix
            backend:
              service:
                name: vscode-server
                port:
                  number: ${VSCODE_SERVER_PORT}
---
${ACCOUNT_CONFIGMAP}
---
${ACCOUNT_SECRET}
---
${ACCOUNT_SSSH_KEY}
---
${INGRESS_SECRET_TLS}
