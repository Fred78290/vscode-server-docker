apiVersion: v1
kind: Namespace
metadata:
  name: ${VSCODE_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
---
apiVersion: v1
kind: Service
metadata:
  name: vscode-server
  namespace: ${VSCODE_NAMESPACE}
  labels:
    app.kubernetes.io/name: vscode-server
spec:
  type: ClusterIP
  ports:
    - appProtocol: http
      name: http
      port: 8000
      targetPort: http
  selector:
    app.kubernetes.io/name: vscode-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vscode-server
  namespace: ${VSCODE_NAMESPACE}
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: vscode-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vscode-server
    spec:
      serviceAccountName: vscode-server
      containers:
        - name: dind-daemon
          image: docker:dind
          imagePullPolicy: Always
          securityContext:
            privileged: true
          resources:
            limits:
              cpu: ${DIND_CPU_MAX}
              memory: ${DIND_MEM_MAX}
            requests:
              cpu: ${DIND_CPU_REQUEST}
              memory: ${DIND_MEM_REQUEST}
          volumeMounts:
            - name: docker-graph-storage
              mountPath: /var/lib/docker
            - name: docker-graph-certs
              mountPath: /certs
            - name: docker-graph-run
              mountPath: /var/run
        - name: vscode-server
          image: ${VSCODE_SERVER_IMAGE}
          imagePullPolicy: Always
          ports:
            - containerPort: 8000
              name: http
          volumeMounts:
            - mountPath: /usr/share/vscode-server
              name: vscode-server-data
            - mountPath: /home/vscode-server/sources
              name: vscode-server-sources
            - mountPath: /certs
              name: docker-graph-certs
            - mountPath: /var/run
              name: docker-graph-run
          env:
            - name: VSCODE_KEYRING_PASS
              value: ${VSCODE_KEYRING_PASS}
            - name: VSCODE_SERVER_DATA_DIR
              value: /usr/share/vscode-server
          resources:
            limits:
              cpu: ${VSCODE_CPU_MAX}
              memory: ${VSCODE_MEM_MAX}
            requests:
              cpu: ${VSCODE_CPU_REQUEST}
              memory: ${VSCODE_MEM_REQUEST}
      volumes:
        - name: docker-graph-run
          emptyDir: {}
        - name: docker-graph-certs
          emptyDir: {}
        - name: docker-graph-storage
          emptyDir: {}
        - name: vscode-server-data
          emptyDir: {}
        - name: vscode-server-sources
          persistentVolumeClaim:
            claimName: vscode-server
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  namespace: ${VSCODE_NAMESPACE}
  name: vscode-server
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: ${VSCODE_NAMESPACE}
  name: vscode-server
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vscode-server-ingress
  namespace: ${VSCODE_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/secure-backends: "false"
    nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
    xcert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: ${NGINX_INGRESS_CLASS}
  tls:
    - hosts:
        - ${VSCODE_HOSTNAME}
      secretName: vscode-server-ingress-tls
  rules:
    - host: ${VSCODE_HOSTNAME}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: vscode-server
                port:
                  number: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: vscode-server-ingress-oauth2
  namespace: ${VSCODE_NAMESPACE}
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/secure-backends: "false"
    xcert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  ingressClassName: ${NGINX_INGRESS_CLASS}
  tls:
    - hosts:
        - ${VSCODE_HOSTNAME}
      secretName: vscode-server-ingress-tls
  rules:
    - host: ${VSCODE_HOSTNAME}
      http:
        paths:
          - path: /oauth2
            pathType: Prefix
            backend:
              service:
                name: oauth2-proxy
                port:
                  number: 4180
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: oauth2-proxy
  name: oauth2-proxy
  namespace: ${VSCODE_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oauth2-proxy
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oauth2-proxy
    spec:
      containers:
      - args:
        - --provider=${VSCODE_OAUTH2_PROXY_PROVIDER}
        - --client-id=${VSCODE_OAUTH2_PROXY_CLIENT_ID}
        - --client-secret=${VSCODE_OAUTH2_PROXY_CLIENT_SECRET}
        - --cookie-secret=${VSCODE_OAUTH2_PROXY_COOKIE_SECRET}
        - --email-domain=*
        - --upstream=file:///dev/null
        - --http-address=0.0.0.0:4180
        resources:
          limits:
            cpu: 200m
            memory: 64Mi
          requests:
            cpu: 50m
            memory: 20Mi
        image: quay.io/oauth2-proxy/oauth2-proxy:latest
        imagePullPolicy: Always
        name: oauth2-proxy
        ports:
        - containerPort: 4180
          protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/name: oauth2-proxy
  name: oauth2-proxy
  namespace: vscode-server
spec:
  ports:
  - name: http
    port: 4180
    protocol: TCP
    targetPort: 4180
  selector:
    app.kubernetes.io/name: oauth2-proxy
